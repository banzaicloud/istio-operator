// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1alpha1/common.proto

package v1alpha1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	v1 "k8s.io/api/core/v1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NamespacedName struct {
	// Name of the referenced Kubernetes resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace of the referenced Kubernetes resource
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamespacedName) Reset()         { *m = NamespacedName{} }
func (m *NamespacedName) String() string { return proto.CompactTextString(m) }
func (*NamespacedName) ProtoMessage()    {}
func (*NamespacedName) Descriptor() ([]byte, []int) {
	return fileDescriptor_53057eb05156167c, []int{0}
}
func (m *NamespacedName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespacedName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespacedName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespacedName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespacedName.Merge(m, src)
}
func (m *NamespacedName) XXX_Size() int {
	return m.Size()
}
func (m *NamespacedName) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespacedName.DiscardUnknown(m)
}

var xxx_messageInfo_NamespacedName proto.InternalMessageInfo

func (m *NamespacedName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NamespacedName) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type BaseK8SResourceConfigurationWithHPAWithoutImage struct {
	// Standard Kubernetes replica count configuration
	// +kubebuilder:validation:Minimum=0
	ReplicaCount *int32 `protobuf:"bytes,1,opt,name=replicaCount,proto3,wktptr" json:"replicaCount,omitempty"`
	// Standard Kubernetes minimum replicas configuration
	// +kubebuilder:validation:Minimum=0
	MinReplicas *int32 `protobuf:"bytes,2,opt,name=minReplicas,proto3,wktptr" json:"minReplicas,omitempty"`
	// Standard Kubernetes maximum replicas configuration
	// +kubebuilder:validation:Minimum=0
	MaxReplicas *int32 `protobuf:"bytes,3,opt,name=maxReplicas,proto3,wktptr" json:"maxReplicas,omitempty"`
	// Standard Kubernetes resource configuration
	BaseK8SResourceConfiguration `protobuf:"bytes,4,opt,name=BaseK8sResourceConfig,proto3,embedded=BaseK8sResourceConfig" json:",inline"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) Reset() {
	*m = BaseK8SResourceConfigurationWithHPAWithoutImage{}
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) String() string {
	return proto.CompactTextString(m)
}
func (*BaseK8SResourceConfigurationWithHPAWithoutImage) ProtoMessage() {}
func (*BaseK8SResourceConfigurationWithHPAWithoutImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_53057eb05156167c, []int{1}
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseK8SResourceConfigurationWithHPAWithoutImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseK8SResourceConfigurationWithHPAWithoutImage.Merge(m, src)
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) XXX_Size() int {
	return m.Size()
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseK8SResourceConfigurationWithHPAWithoutImage.DiscardUnknown(m)
}

var xxx_messageInfo_BaseK8SResourceConfigurationWithHPAWithoutImage proto.InternalMessageInfo

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) GetReplicaCount() *int32 {
	if m != nil {
		return m.ReplicaCount
	}
	return nil
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) GetMinReplicas() *int32 {
	if m != nil {
		return m.MinReplicas
	}
	return nil
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) GetMaxReplicas() *int32 {
	if m != nil {
		return m.MaxReplicas
	}
	return nil
}

type BaseK8SResourceConfiguration struct {
	// Standard Kubernetes memory and CPU resource requirements
	Resources *v1.ResourceRequirements `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	// Standard Kubernetes node selector configuration
	NodeSelector map[string]string `protobuf:"bytes,2,rep,name=nodeSelector,proto3" json:"nodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Standard Kubernetes affinity configuration
	Affinity *v1.Affinity `protobuf:"bytes,3,opt,name=affinity,proto3" json:"affinity,omitempty"`
	// Standard Kubernetes toleration configuration
	Tolerations []v1.Toleration `protobuf:"bytes,4,rep,name=tolerations,proto3" json:"tolerations"`
	// Standard Kubernetes pod annotation configuration
	PodAnnotations map[string]string `protobuf:"bytes,5,rep,name=podAnnotations,proto3" json:"podAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Standard Kubernetes security context configuration
	SecurityContext      *v1.SecurityContext `protobuf:"bytes,6,opt,name=securityContext,proto3" json:"securityContext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BaseK8SResourceConfiguration) Reset()         { *m = BaseK8SResourceConfiguration{} }
func (m *BaseK8SResourceConfiguration) String() string { return proto.CompactTextString(m) }
func (*BaseK8SResourceConfiguration) ProtoMessage()    {}
func (*BaseK8SResourceConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_53057eb05156167c, []int{2}
}
func (m *BaseK8SResourceConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseK8SResourceConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseK8SResourceConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseK8SResourceConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseK8SResourceConfiguration.Merge(m, src)
}
func (m *BaseK8SResourceConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *BaseK8SResourceConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseK8SResourceConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_BaseK8SResourceConfiguration proto.InternalMessageInfo

func (m *BaseK8SResourceConfiguration) GetResources() *v1.ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *BaseK8SResourceConfiguration) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *BaseK8SResourceConfiguration) GetAffinity() *v1.Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *BaseK8SResourceConfiguration) GetTolerations() []v1.Toleration {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *BaseK8SResourceConfiguration) GetPodAnnotations() map[string]string {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

func (m *BaseK8SResourceConfiguration) GetSecurityContext() *v1.SecurityContext {
	if m != nil {
		return m.SecurityContext
	}
	return nil
}

func init() {
	proto.RegisterType((*NamespacedName)(nil), "istio_operator.v2.api.v1alpha1.NamespacedName")
	proto.RegisterType((*BaseK8SResourceConfigurationWithHPAWithoutImage)(nil), "istio_operator.v2.api.v1alpha1.BaseK8sResourceConfigurationWithHPAWithoutImage")
	proto.RegisterType((*BaseK8SResourceConfiguration)(nil), "istio_operator.v2.api.v1alpha1.BaseK8sResourceConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "istio_operator.v2.api.v1alpha1.BaseK8sResourceConfiguration.NodeSelectorEntry")
	proto.RegisterMapType((map[string]string)(nil), "istio_operator.v2.api.v1alpha1.BaseK8sResourceConfiguration.PodAnnotationsEntry")
}

func init() { proto.RegisterFile("api/v1alpha1/common.proto", fileDescriptor_53057eb05156167c) }

var fileDescriptor_53057eb05156167c = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x4e, 0xdb, 0x4a,
	0x14, 0x7d, 0x26, 0x81, 0xf7, 0x98, 0x20, 0xde, 0x7b, 0x03, 0x55, 0xd3, 0x14, 0x25, 0x28, 0x95,
	0x2a, 0x16, 0x74, 0xac, 0x04, 0x21, 0x45, 0x55, 0xa5, 0x2a, 0x89, 0x40, 0x45, 0x55, 0x11, 0x32,
	0x55, 0x2b, 0x75, 0x83, 0x26, 0xce, 0x8d, 0x33, 0xc2, 0x9e, 0xeb, 0x8e, 0xc7, 0x29, 0xe9, 0x0f,
	0x74, 0xd3, 0x8f, 0xe8, 0xb6, 0x7f, 0xc2, 0x92, 0x2f, 0x48, 0x2b, 0x96, 0x7c, 0x45, 0xe5, 0xb1,
	0x13, 0x12, 0x1a, 0x21, 0x2a, 0x56, 0xb9, 0x1e, 0x9f, 0x73, 0xee, 0xb9, 0x27, 0xd7, 0x43, 0x1e,
	0xf1, 0x50, 0xd8, 0x83, 0x1a, 0xf7, 0xc3, 0x3e, 0xaf, 0xd9, 0x2e, 0x06, 0x01, 0x4a, 0x16, 0x2a,
	0xd4, 0x48, 0xcb, 0x22, 0xd2, 0x02, 0x4f, 0x30, 0x04, 0xc5, 0x35, 0x2a, 0x36, 0xa8, 0x33, 0x1e,
	0x0a, 0x36, 0x06, 0x97, 0xca, 0x1e, 0xa2, 0xe7, 0x83, 0x6d, 0xd0, 0x9d, 0xb8, 0x67, 0x7f, 0x52,
	0x3c, 0x0c, 0x41, 0x45, 0x29, 0xbf, 0xb4, 0xee, 0xa1, 0x87, 0xa6, 0xb4, 0x93, 0x2a, 0x3b, 0xad,
	0x64, 0xac, 0xa4, 0x6f, 0x4f, 0x80, 0xdf, 0x3d, 0xe9, 0x40, 0x9f, 0x0f, 0x04, 0xaa, 0x0c, 0x50,
	0x3d, 0x6d, 0x44, 0x4c, 0xa0, 0x01, 0xb8, 0xa8, 0xc0, 0x1e, 0xd4, 0x6c, 0x0f, 0x64, 0x62, 0x02,
	0xba, 0x29, 0xa6, 0x8a, 0x64, 0xf5, 0x90, 0x07, 0x10, 0x85, 0xdc, 0x85, 0x6e, 0x52, 0xd1, 0xa7,
	0x24, 0x2f, 0x79, 0x00, 0x45, 0x6b, 0xd3, 0xda, 0x5a, 0x6e, 0xd1, 0xab, 0x51, 0x65, 0x35, 0x79,
	0xde, 0xc6, 0x40, 0x68, 0x08, 0x42, 0x3d, 0x74, 0xcc, 0x7b, 0xba, 0x4b, 0x96, 0xe5, 0x98, 0x59,
	0x5c, 0x30, 0xe0, 0x87, 0x57, 0xa3, 0xca, 0xda, 0xe4, 0x70, 0x8a, 0x71, 0x8d, 0xac, 0x7e, 0xcd,
	0x11, 0xbb, 0xc5, 0x23, 0x78, 0xdd, 0x88, 0x1c, 0x88, 0x30, 0x56, 0x2e, 0xb4, 0x51, 0xf6, 0x84,
	0x17, 0x2b, 0xae, 0x05, 0xca, 0xf7, 0x42, 0xf7, 0x5f, 0x1d, 0x35, 0x93, 0x1f, 0x8c, 0xf5, 0x41,
	0xc0, 0x3d, 0xa0, 0x7b, 0x64, 0x45, 0x41, 0xe8, 0x0b, 0x97, 0xb7, 0x31, 0x96, 0xda, 0x58, 0x2b,
	0xd4, 0x1f, 0xb3, 0x34, 0x00, 0x36, 0x8e, 0x8d, 0x1d, 0x48, 0xbd, 0x53, 0x7f, 0xc7, 0xfd, 0x18,
	0x5a, 0xf9, 0x6f, 0x3f, 0x2a, 0x96, 0x33, 0x43, 0xa3, 0x6d, 0x52, 0x08, 0x84, 0x74, 0xd2, 0xa3,
	0xc8, 0x78, 0xbe, 0x93, 0xca, 0x34, 0xcb, 0x88, 0xf0, 0xb3, 0x89, 0x48, 0xee, 0xee, 0x22, 0xd7,
	0x2c, 0xfa, 0xc5, 0x22, 0x0f, 0xe6, 0x86, 0x50, 0xcc, 0x1b, 0xbd, 0x17, 0xec, 0xf6, 0x8d, 0x61,
	0xb7, 0x25, 0xd8, 0x5a, 0x3b, 0x1f, 0x55, 0xfe, 0xba, 0x18, 0x55, 0xac, 0xab, 0x51, 0xe5, 0xef,
	0x6d, 0x21, 0x7d, 0x21, 0xc1, 0x99, 0xdf, 0xaf, 0xfa, 0x7d, 0x91, 0x6c, 0xdc, 0x26, 0x46, 0xf7,
	0xc9, 0xb2, 0xca, 0x5e, 0x44, 0x59, 0xf0, 0x5b, 0x2c, 0x5d, 0x2c, 0x63, 0x29, 0x59, 0x2c, 0x36,
	0xa8, 0xb1, 0x31, 0xdb, 0x81, 0x8f, 0xb1, 0x50, 0x10, 0x80, 0xd4, 0x91, 0x73, 0x4d, 0xa5, 0x8a,
	0xac, 0x48, 0xec, 0xc2, 0x31, 0xf8, 0xe0, 0x6a, 0x54, 0xc5, 0x85, 0xcd, 0xdc, 0x56, 0xa1, 0x7e,
	0x78, 0x9f, 0x41, 0xd9, 0xe1, 0x94, 0xe0, 0x9e, 0xd4, 0x6a, 0xe8, 0xcc, 0xf4, 0xa0, 0x0d, 0xf2,
	0x0f, 0xef, 0xf5, 0x84, 0x14, 0x7a, 0x98, 0xfd, 0x51, 0x1b, 0xf3, 0xac, 0x37, 0x33, 0x8c, 0x33,
	0x41, 0xd3, 0x7d, 0x52, 0xd0, 0xe8, 0x43, 0xda, 0x27, 0x2a, 0xe6, 0x8d, 0xd9, 0xf2, 0x3c, 0xf2,
	0xdb, 0x09, 0xac, 0x95, 0x4f, 0x72, 0x77, 0xa6, 0x89, 0xf4, 0x8c, 0xac, 0x86, 0xd8, 0x6d, 0x4a,
	0x89, 0x3a, 0x93, 0x5a, 0x34, 0x52, 0x47, 0xf7, 0x9a, 0xfb, 0x68, 0x46, 0x32, 0x9d, 0xfc, 0x46,
	0x1f, 0xfa, 0x86, 0xfc, 0x1b, 0x81, 0x1b, 0x2b, 0xa1, 0x87, 0x6d, 0x94, 0x1a, 0xce, 0x74, 0x71,
	0xc9, 0x44, 0xf0, 0x64, 0xde, 0x14, 0xc7, 0xb3, 0x50, 0xe7, 0x26, 0xb7, 0xf4, 0x92, 0xfc, 0xff,
	0x5b, 0xda, 0xf4, 0x3f, 0x92, 0x3b, 0x85, 0x61, 0x7a, 0x53, 0x38, 0x49, 0x49, 0xd7, 0xc9, 0xe2,
	0x20, 0x59, 0xfa, 0xf4, 0x42, 0x70, 0xd2, 0x87, 0xe7, 0x0b, 0x0d, 0xab, 0xd4, 0x24, 0x6b, 0x73,
	0x6c, 0xff, 0x89, 0x44, 0xab, 0x7d, 0x7e, 0x59, 0xb6, 0x2e, 0x2e, 0xcb, 0xd6, 0xcf, 0xcb, 0xb2,
	0xf5, 0x61, 0xd7, 0x13, 0xba, 0x1f, 0x77, 0x98, 0x8b, 0x81, 0xdd, 0xe1, 0xf2, 0x33, 0x17, 0xae,
	0x8f, 0x71, 0xd7, 0x36, 0xc1, 0x3e, 0x1b, 0x07, 0x6b, 0x0f, 0xea, 0xf6, 0xf4, 0xc5, 0xdc, 0x59,
	0x32, 0x9f, 0xe8, 0xce, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0x2b, 0xc2, 0x8e, 0xaf, 0x05,
	0x00, 0x00,
}

func (m *NamespacedName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespacedName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespacedName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.BaseK8SResourceConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCommon(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.MaxReplicas != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdInt32MarshalTo(*m.MaxReplicas, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdInt32(*m.MaxReplicas):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintCommon(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x1a
	}
	if m.MinReplicas != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdInt32MarshalTo(*m.MinReplicas, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdInt32(*m.MinReplicas):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintCommon(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x12
	}
	if m.ReplicaCount != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdInt32MarshalTo(*m.ReplicaCount, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdInt32(*m.ReplicaCount):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintCommon(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseK8SResourceConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseK8SResourceConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseK8SResourceConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SecurityContext != nil {
		{
			size, err := m.SecurityContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.PodAnnotations) > 0 {
		for k := range m.PodAnnotations {
			v := m.PodAnnotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCommon(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCommon(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCommon(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Tolerations) > 0 {
		for iNdEx := len(m.Tolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Affinity != nil {
		{
			size, err := m.Affinity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeSelector) > 0 {
		for k := range m.NodeSelector {
			v := m.NodeSelector[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCommon(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCommon(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCommon(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NamespacedName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicaCount != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdInt32(*m.ReplicaCount)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.MinReplicas != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdInt32(*m.MinReplicas)
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.MaxReplicas != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdInt32(*m.MaxReplicas)
		n += 1 + l + sovCommon(uint64(l))
	}
	l = m.BaseK8SResourceConfiguration.Size()
	n += 1 + l + sovCommon(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseK8SResourceConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.NodeSelector) > 0 {
		for k, v := range m.NodeSelector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCommon(uint64(len(k))) + 1 + len(v) + sovCommon(uint64(len(v)))
			n += mapEntrySize + 1 + sovCommon(uint64(mapEntrySize))
		}
	}
	if m.Affinity != nil {
		l = m.Affinity.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.Tolerations) > 0 {
		for _, e := range m.Tolerations {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if len(m.PodAnnotations) > 0 {
		for k, v := range m.PodAnnotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCommon(uint64(len(k))) + 1 + len(v) + sovCommon(uint64(len(v)))
			n += mapEntrySize + 1 + sovCommon(uint64(mapEntrySize))
		}
	}
	if m.SecurityContext != nil {
		l = m.SecurityContext.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NamespacedName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespacedName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespacedName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseK8sResourceConfigurationWithHPAWithoutImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseK8sResourceConfigurationWithHPAWithoutImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicaCount == nil {
				m.ReplicaCount = new(int32)
			}
			if err := github_com_gogo_protobuf_types.StdInt32Unmarshal(m.ReplicaCount, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReplicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinReplicas == nil {
				m.MinReplicas = new(int32)
			}
			if err := github_com_gogo_protobuf_types.StdInt32Unmarshal(m.MinReplicas, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReplicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxReplicas == nil {
				m.MaxReplicas = new(int32)
			}
			if err := github_com_gogo_protobuf_types.StdInt32Unmarshal(m.MaxReplicas, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseK8SResourceConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseK8SResourceConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseK8SResourceConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseK8sResourceConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseK8sResourceConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &v1.ResourceRequirements{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCommon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeSelector[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affinity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Affinity == nil {
				m.Affinity = &v1.Affinity{}
			}
			if err := m.Affinity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tolerations = append(m.Tolerations, v1.Toleration{})
			if err := m.Tolerations[len(m.Tolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCommon
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCommon
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCommon(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCommon
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PodAnnotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityContext == nil {
				m.SecurityContext = &v1.SecurityContext{}
			}
			if err := m.SecurityContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
