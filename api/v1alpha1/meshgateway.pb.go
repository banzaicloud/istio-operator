// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1alpha1/meshgateway.proto

package v1alpha1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	_ "istio.io/api/mesh/v1alpha1"
	_ "istio.io/gogo-genproto/googleapis/google/api"
	k8s_io_api_core_v1 "k8s.io/api/core/v1"
	v1 "k8s.io/api/core/v1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GatewayType int32

const (
	GatewayType_Ingress GatewayType = 0
	GatewayType_Egress  GatewayType = 1
)

var GatewayType_name = map[int32]string{
	0: "Ingress",
	1: "Egress",
}

var GatewayType_value = map[string]int32{
	"Ingress": 0,
	"Egress":  1,
}

func (x GatewayType) String() string {
	return proto.EnumName(GatewayType_name, int32(x))
}

func (GatewayType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdd75a369aea761c, []int{0}
}

type ConfigState int32

const (
	ConfigState_Created         ConfigState = 0
	ConfigState_ReconcileFailed ConfigState = 1
	ConfigState_Reconciling     ConfigState = 2
	ConfigState_Available       ConfigState = 3
	ConfigState_Unmanaged       ConfigState = 4
)

var ConfigState_name = map[int32]string{
	0: "Created",
	1: "ReconcileFailed",
	2: "Reconciling",
	3: "Available",
	4: "Unmanaged",
}

var ConfigState_value = map[string]int32{
	"Created":         0,
	"ReconcileFailed": 1,
	"Reconciling":     2,
	"Available":       3,
	"Unmanaged":       4,
}

func (x ConfigState) String() string {
	return proto.EnumName(ConfigState_name, int32(x))
}

func (ConfigState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdd75a369aea761c, []int{1}
}

// MeshGateway defines an Istio ingress or egress gateway
//
// <!-- crd generation tags
// +cue-gen:MeshGateway:groupName:servicemesh.cisco.com
// +cue-gen:MeshGateway:version:v1alpha1
// +cue-gen:MeshGateway:storageVersion
// +cue-gen:MeshGateway:annotations:helm.sh/resource-policy=keep
// +cue-gen:MeshGateway:subresource:status
// +cue-gen:MeshGateway:scope:Namespaced
// +cue-gen:MeshGateway:resource:shortNames=mgw,meshgw
// +cue-gen:MeshGateway:printerColumn:name=Age,type=date,JSONPath=.metadata.creationTimestamp,description="CreationTimestamp is a timestamp
// representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations.
// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
// +cue-gen:MeshGateway:preserveUnknownFields:false
// -->
//
// <!-- go code generation tags
// +genclient
// +k8s:deepcopy-gen=true
// -->
type MeshGatewaySpec struct {
	// Contains the intended version for the Mesh Gateway.
	// +kubebuilder:validation:Pattern=^1.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version"`
	//
	MeshGatewayConfiguration `protobuf:"bytes,2,opt,name=MeshGatewayConfiguration,proto3,embedded=MeshGatewayConfiguration" json:",inline"`
	// +kubebuilder:validation:MinItems=0
	Ports []ServicePort `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports"`
	// +kubebuilder:validation:Enum=ingress;egress
	Type GatewayType `protobuf:"varint,4,opt,name=type,proto3,enum=istio_operator.v2.api.v1alpha1.GatewayType" json:"type"`
	// Istio CR to which this gateway belongs to
	IstioControlPlane    *NamespacedName `protobuf:"bytes,5,opt,name=istioControlPlane,proto3" json:"istioControlPlane,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MeshGatewaySpec) Reset()         { *m = MeshGatewaySpec{} }
func (m *MeshGatewaySpec) String() string { return proto.CompactTextString(m) }
func (*MeshGatewaySpec) ProtoMessage()    {}
func (*MeshGatewaySpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd75a369aea761c, []int{0}
}
func (m *MeshGatewaySpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshGatewaySpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshGatewaySpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshGatewaySpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshGatewaySpec.Merge(m, src)
}
func (m *MeshGatewaySpec) XXX_Size() int {
	return m.Size()
}
func (m *MeshGatewaySpec) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshGatewaySpec.DiscardUnknown(m)
}

var xxx_messageInfo_MeshGatewaySpec proto.InternalMessageInfo

func (m *MeshGatewaySpec) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MeshGatewaySpec) GetPorts() []ServicePort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *MeshGatewaySpec) GetType() GatewayType {
	if m != nil {
		return m.Type
	}
	return GatewayType_Ingress
}

func (m *MeshGatewaySpec) GetIstioControlPlane() *NamespacedName {
	if m != nil {
		return m.IstioControlPlane
	}
	return nil
}

type MeshGatewayConfiguration struct {
	//
	BaseK8SResourceConfigurationWithHPAWithoutImage `protobuf:"bytes,1,opt,name=BaseK8sResourceConfigurationWithHPAWithoutImage,proto3,embedded=BaseK8sResourceConfigurationWithHPAWithoutImage" json:",inline"`
	//
	Labels map[string]string `protobuf:"bytes,2,rep,name=Labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// +kubebuilder:validation:Enum=ClusterIP;NodePort;LoadBalancer;ExternalName
	ServiceType k8s_io_api_core_v1.ServiceType `protobuf:"bytes,3,opt,name=ServiceType,proto3,customtype=k8s.io/api/core/v1.ServiceType" json:"serviceType,omitempty"`
	//
	LoadBalancerIP string `protobuf:"bytes,4,opt,name=LoadBalancerIP,proto3" json:"loadBalancerIP,omitempty"`
	//
	ServiceAnnotations map[string]string `protobuf:"bytes,5,rep,name=ServiceAnnotations,proto3" json:"serviceAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	ServiceLabels map[string]string `protobuf:"bytes,6,rep,name=ServiceLabels,proto3" json:"serviceLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// +kubebuilder:validation:Enum=Local;Cluster
	ServiceExternalTrafficPolicyType k8s_io_api_core_v1.ServiceExternalTrafficPolicyType `protobuf:"bytes,7,opt,name=ServiceExternalTrafficPolicyType,proto3,customtype=k8s.io/api/core/v1.ServiceExternalTrafficPolicyType" json:"serviceExternalTrafficPolicyType,omitempty"`
	//
	SDS *GatewaySDSConfiguration `protobuf:"bytes,8,opt,name=SDS,proto3" json:"sds,omitempty"`
	//
	RequestedNetworkView string `protobuf:"bytes,9,opt,name=RequestedNetworkView,proto3" json:"requestedNetworkView,omitempty"`
	// If present will be appended to the environment variables of the container
	AdditionalEnvVars []v1.EnvVar `protobuf:"bytes,10,rep,name=AdditionalEnvVars,proto3" json:"additionalEnvVars,omitempty"`
	// Whether to run the gateway in a privileged container
	RunAsRoot            bool     `protobuf:"varint,11,opt,name=RunAsRoot,proto3" json:"runAsRoot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshGatewayConfiguration) Reset()         { *m = MeshGatewayConfiguration{} }
func (m *MeshGatewayConfiguration) String() string { return proto.CompactTextString(m) }
func (*MeshGatewayConfiguration) ProtoMessage()    {}
func (*MeshGatewayConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd75a369aea761c, []int{1}
}
func (m *MeshGatewayConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshGatewayConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshGatewayConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshGatewayConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshGatewayConfiguration.Merge(m, src)
}
func (m *MeshGatewayConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *MeshGatewayConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshGatewayConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_MeshGatewayConfiguration proto.InternalMessageInfo

func (m *MeshGatewayConfiguration) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *MeshGatewayConfiguration) GetLoadBalancerIP() string {
	if m != nil {
		return m.LoadBalancerIP
	}
	return ""
}

func (m *MeshGatewayConfiguration) GetServiceAnnotations() map[string]string {
	if m != nil {
		return m.ServiceAnnotations
	}
	return nil
}

func (m *MeshGatewayConfiguration) GetServiceLabels() map[string]string {
	if m != nil {
		return m.ServiceLabels
	}
	return nil
}

func (m *MeshGatewayConfiguration) GetSDS() *GatewaySDSConfiguration {
	if m != nil {
		return m.SDS
	}
	return nil
}

func (m *MeshGatewayConfiguration) GetRequestedNetworkView() string {
	if m != nil {
		return m.RequestedNetworkView
	}
	return ""
}

func (m *MeshGatewayConfiguration) GetAdditionalEnvVars() []v1.EnvVar {
	if m != nil {
		return m.AdditionalEnvVars
	}
	return nil
}

func (m *MeshGatewayConfiguration) GetRunAsRoot() bool {
	if m != nil {
		return m.RunAsRoot
	}
	return false
}

// TODO: move these to seperate protos
type BaseK8SResourceConfigurationWithHPAWithoutImage struct {
	// +kubebuilder:validation:Minimum=0
	ReplicaCount int32 `protobuf:"varint,1,opt,name=ReplicaCount,proto3" json:"replicaCount,omitempty"`
	// +kubebuilder:validation:Minimum=0
	MinReplicas int32 `protobuf:"varint,2,opt,name=MinReplicas,proto3" json:"minReplicas,omitempty"`
	// +kubebuilder:validation:Minimum=0
	MaxReplicas int32 `protobuf:"varint,3,opt,name=MaxReplicas,proto3" json:"maxReplicas,omitempty"`
	//
	BaseK8SResourceConfiguration `protobuf:"bytes,4,opt,name=BaseK8sResourceConfiguration,proto3,embedded=BaseK8sResourceConfiguration" json:",inline"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	XXX_unrecognized             []byte   `json:"-"`
	XXX_sizecache                int32    `json:"-"`
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) Reset() {
	*m = BaseK8SResourceConfigurationWithHPAWithoutImage{}
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) String() string {
	return proto.CompactTextString(m)
}
func (*BaseK8SResourceConfigurationWithHPAWithoutImage) ProtoMessage() {}
func (*BaseK8SResourceConfigurationWithHPAWithoutImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd75a369aea761c, []int{2}
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseK8SResourceConfigurationWithHPAWithoutImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseK8SResourceConfigurationWithHPAWithoutImage.Merge(m, src)
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) XXX_Size() int {
	return m.Size()
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseK8SResourceConfigurationWithHPAWithoutImage.DiscardUnknown(m)
}

var xxx_messageInfo_BaseK8SResourceConfigurationWithHPAWithoutImage proto.InternalMessageInfo

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) GetReplicaCount() int32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) GetMinReplicas() int32 {
	if m != nil {
		return m.MinReplicas
	}
	return 0
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) GetMaxReplicas() int32 {
	if m != nil {
		return m.MaxReplicas
	}
	return 0
}

type BaseK8SResourceConfiguration struct {
	//
	Resources *v1.ResourceRequirements `protobuf:"bytes,1,opt,name=Resources,proto3" json:"resources,omitempty"`
	//
	NodeSelector map[string]string `protobuf:"bytes,2,rep,name=NodeSelector,proto3" json:"nodeSelector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	Affinity *v1.Affinity `protobuf:"bytes,3,opt,name=Affinity,proto3" json:"affinity,omitempty"`
	//
	Tolerations []v1.Toleration `protobuf:"bytes,4,rep,name=Tolerations,proto3" json:"tolerations,omitempty"`
	//
	PodAnnotations map[string]string `protobuf:"bytes,5,rep,name=PodAnnotations,proto3" json:"podAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//
	SecurityContext      *v1.SecurityContext `protobuf:"bytes,6,opt,name=SecurityContext,proto3" json:"securityContext,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BaseK8SResourceConfiguration) Reset()         { *m = BaseK8SResourceConfiguration{} }
func (m *BaseK8SResourceConfiguration) String() string { return proto.CompactTextString(m) }
func (*BaseK8SResourceConfiguration) ProtoMessage()    {}
func (*BaseK8SResourceConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd75a369aea761c, []int{3}
}
func (m *BaseK8SResourceConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseK8SResourceConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseK8SResourceConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseK8SResourceConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseK8SResourceConfiguration.Merge(m, src)
}
func (m *BaseK8SResourceConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *BaseK8SResourceConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseK8SResourceConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_BaseK8SResourceConfiguration proto.InternalMessageInfo

func (m *BaseK8SResourceConfiguration) GetResources() *v1.ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *BaseK8SResourceConfiguration) GetNodeSelector() map[string]string {
	if m != nil {
		return m.NodeSelector
	}
	return nil
}

func (m *BaseK8SResourceConfiguration) GetAffinity() *v1.Affinity {
	if m != nil {
		return m.Affinity
	}
	return nil
}

func (m *BaseK8SResourceConfiguration) GetTolerations() []v1.Toleration {
	if m != nil {
		return m.Tolerations
	}
	return nil
}

func (m *BaseK8SResourceConfiguration) GetPodAnnotations() map[string]string {
	if m != nil {
		return m.PodAnnotations
	}
	return nil
}

func (m *BaseK8SResourceConfiguration) GetSecurityContext() *v1.SecurityContext {
	if m != nil {
		return m.SecurityContext
	}
	return nil
}

type GatewaySDSConfiguration struct {
	//
	Enabled bool `protobuf:"varint,1,opt,name=Enabled,proto3" json:"enabled,omitempty"`
	//
	Image string `protobuf:"bytes,2,opt,name=Image,proto3" json:"image,omitempty"`
	//
	Resources            *v1.ResourceRequirements `protobuf:"bytes,3,opt,name=Resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GatewaySDSConfiguration) Reset()         { *m = GatewaySDSConfiguration{} }
func (m *GatewaySDSConfiguration) String() string { return proto.CompactTextString(m) }
func (*GatewaySDSConfiguration) ProtoMessage()    {}
func (*GatewaySDSConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd75a369aea761c, []int{4}
}
func (m *GatewaySDSConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GatewaySDSConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GatewaySDSConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GatewaySDSConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewaySDSConfiguration.Merge(m, src)
}
func (m *GatewaySDSConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *GatewaySDSConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewaySDSConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_GatewaySDSConfiguration proto.InternalMessageInfo

func (m *GatewaySDSConfiguration) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *GatewaySDSConfiguration) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *GatewaySDSConfiguration) GetResources() *v1.ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

// TODO: GatewayTargetPort to pointer
type ServicePort struct {
	//
	GatewayTargetPort int32 `protobuf:"varint,1,opt,name=GatewayTargetPort,proto3" json:"targetPort,omitempty"`
	//
	v1.ServicePort       `protobuf:"bytes,2,opt,name=ServicePort,proto3,embedded=ServicePort" json:",inline"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServicePort) Reset()         { *m = ServicePort{} }
func (m *ServicePort) String() string { return proto.CompactTextString(m) }
func (*ServicePort) ProtoMessage()    {}
func (*ServicePort) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd75a369aea761c, []int{5}
}
func (m *ServicePort) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicePort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicePort.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicePort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicePort.Merge(m, src)
}
func (m *ServicePort) XXX_Size() int {
	return m.Size()
}
func (m *ServicePort) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicePort.DiscardUnknown(m)
}

var xxx_messageInfo_ServicePort proto.InternalMessageInfo

func (m *ServicePort) GetGatewayTargetPort() int32 {
	if m != nil {
		return m.GatewayTargetPort
	}
	return 0
}

type NamespacedName struct {
	// Name of the referenced Kubernetes resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace of the referenced Kubernetes resource
	Namespace            string   `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamespacedName) Reset()         { *m = NamespacedName{} }
func (m *NamespacedName) String() string { return proto.CompactTextString(m) }
func (*NamespacedName) ProtoMessage()    {}
func (*NamespacedName) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd75a369aea761c, []int{6}
}
func (m *NamespacedName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamespacedName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamespacedName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamespacedName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespacedName.Merge(m, src)
}
func (m *NamespacedName) XXX_Size() int {
	return m.Size()
}
func (m *NamespacedName) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespacedName.DiscardUnknown(m)
}

var xxx_messageInfo_NamespacedName proto.InternalMessageInfo

func (m *NamespacedName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NamespacedName) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// <!-- go code generation tags
// +genclient
// +k8s:deepcopy-gen=true
// -->
type MeshGatewayStatus struct {
	//
	Status ConfigState `protobuf:"varint,1,opt,name=Status,proto3,enum=istio_operator.v2.api.v1alpha1.ConfigState" json:"Status,omitempty"`
	//
	GatewayAddress []string `protobuf:"bytes,2,rep,name=GatewayAddress,proto3" json:"GatewayAddress,omitempty"`
	//
	ErrorMessage         string   `protobuf:"bytes,3,opt,name=ErrorMessage,proto3" json:"ErrorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeshGatewayStatus) Reset()         { *m = MeshGatewayStatus{} }
func (m *MeshGatewayStatus) String() string { return proto.CompactTextString(m) }
func (*MeshGatewayStatus) ProtoMessage()    {}
func (*MeshGatewayStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdd75a369aea761c, []int{7}
}
func (m *MeshGatewayStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshGatewayStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshGatewayStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshGatewayStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshGatewayStatus.Merge(m, src)
}
func (m *MeshGatewayStatus) XXX_Size() int {
	return m.Size()
}
func (m *MeshGatewayStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshGatewayStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MeshGatewayStatus proto.InternalMessageInfo

func (m *MeshGatewayStatus) GetStatus() ConfigState {
	if m != nil {
		return m.Status
	}
	return ConfigState_Created
}

func (m *MeshGatewayStatus) GetGatewayAddress() []string {
	if m != nil {
		return m.GatewayAddress
	}
	return nil
}

func (m *MeshGatewayStatus) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func init() {
	proto.RegisterEnum("istio_operator.v2.api.v1alpha1.GatewayType", GatewayType_name, GatewayType_value)
	proto.RegisterEnum("istio_operator.v2.api.v1alpha1.ConfigState", ConfigState_name, ConfigState_value)
	proto.RegisterType((*MeshGatewaySpec)(nil), "istio_operator.v2.api.v1alpha1.MeshGatewaySpec")
	proto.RegisterType((*MeshGatewayConfiguration)(nil), "istio_operator.v2.api.v1alpha1.MeshGatewayConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "istio_operator.v2.api.v1alpha1.MeshGatewayConfiguration.LabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "istio_operator.v2.api.v1alpha1.MeshGatewayConfiguration.ServiceAnnotationsEntry")
	proto.RegisterMapType((map[string]string)(nil), "istio_operator.v2.api.v1alpha1.MeshGatewayConfiguration.ServiceLabelsEntry")
	proto.RegisterType((*BaseK8SResourceConfigurationWithHPAWithoutImage)(nil), "istio_operator.v2.api.v1alpha1.BaseK8sResourceConfigurationWithHPAWithoutImage")
	proto.RegisterType((*BaseK8SResourceConfiguration)(nil), "istio_operator.v2.api.v1alpha1.BaseK8sResourceConfiguration")
	proto.RegisterMapType((map[string]string)(nil), "istio_operator.v2.api.v1alpha1.BaseK8sResourceConfiguration.NodeSelectorEntry")
	proto.RegisterMapType((map[string]string)(nil), "istio_operator.v2.api.v1alpha1.BaseK8sResourceConfiguration.PodAnnotationsEntry")
	proto.RegisterType((*GatewaySDSConfiguration)(nil), "istio_operator.v2.api.v1alpha1.GatewaySDSConfiguration")
	proto.RegisterType((*ServicePort)(nil), "istio_operator.v2.api.v1alpha1.ServicePort")
	proto.RegisterType((*NamespacedName)(nil), "istio_operator.v2.api.v1alpha1.NamespacedName")
	proto.RegisterType((*MeshGatewayStatus)(nil), "istio_operator.v2.api.v1alpha1.MeshGatewayStatus")
}

func init() { proto.RegisterFile("api/v1alpha1/meshgateway.proto", fileDescriptor_fdd75a369aea761c) }

var fileDescriptor_fdd75a369aea761c = []byte{
	// 1505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcd, 0x6e, 0xdb, 0xc6,
	0x16, 0x0e, 0x2d, 0xff, 0x8e, 0xfc, 0x23, 0x8f, 0xed, 0x58, 0x57, 0x71, 0x44, 0x43, 0x01, 0x02,
	0x27, 0x37, 0x97, 0x82, 0x1d, 0x04, 0xd7, 0xf7, 0xa2, 0x68, 0x2a, 0xda, 0x6e, 0xeb, 0x26, 0x71,
	0x05, 0x29, 0x75, 0xd1, 0xa2, 0xa8, 0x31, 0x26, 0x8f, 0xe5, 0x41, 0x28, 0x8e, 0x3a, 0x1c, 0x29,
	0x71, 0x81, 0x3e, 0x40, 0x37, 0xed, 0xaa, 0x79, 0x80, 0xbe, 0x41, 0x17, 0x7d, 0x87, 0xac, 0x82,
	0xac, 0xba, 0xe8, 0x82, 0x28, 0x8c, 0xae, 0xb8, 0xee, 0x03, 0x14, 0x33, 0xa4, 0xac, 0xa1, 0x25,
	0xdb, 0xb1, 0xd3, 0x8d, 0x4d, 0x9e, 0x9f, 0xef, 0x9c, 0x39, 0x73, 0x7e, 0x78, 0x84, 0x8a, 0xa4,
	0x45, 0xcb, 0x9d, 0x55, 0xe2, 0xb5, 0x0e, 0xc9, 0x6a, 0xb9, 0x09, 0xc1, 0x61, 0x83, 0x08, 0x78,
	0x4e, 0x8e, 0xac, 0x16, 0x67, 0x82, 0xe1, 0x22, 0x0d, 0x04, 0x65, 0x7b, 0xac, 0x05, 0x9c, 0x08,
	0xc6, 0xad, 0xce, 0x9a, 0x45, 0x5a, 0xd4, 0xea, 0x6a, 0x14, 0x0a, 0x52, 0xa5, 0x07, 0xe0, 0x30,
	0xff, 0x80, 0x36, 0x62, 0xdd, 0xc2, 0x7c, 0x83, 0x35, 0x98, 0x7a, 0x2c, 0xcb, 0xa7, 0x84, 0x6a,
	0x36, 0x18, 0x6b, 0x78, 0x50, 0x96, 0x86, 0x0f, 0x28, 0x78, 0xee, 0xde, 0x3e, 0x1c, 0x92, 0x0e,
	0x65, 0x3c, 0x11, 0x28, 0x3d, 0x5b, 0x0f, 0x2c, 0xca, 0x94, 0x80, 0xc3, 0x38, 0x94, 0x3b, 0xab,
	0xe5, 0x06, 0xf8, 0xd2, 0x01, 0x70, 0x63, 0x99, 0xd2, 0x9f, 0x19, 0x34, 0xf3, 0x04, 0x82, 0xc3,
	0x8f, 0x62, 0x67, 0xeb, 0x2d, 0x70, 0xf0, 0x1d, 0x34, 0xd6, 0x01, 0x1e, 0x50, 0xe6, 0xe7, 0x8d,
	0x65, 0x63, 0x65, 0xc2, 0x9e, 0x39, 0xae, 0x18, 0x43, 0x51, 0x68, 0x76, 0xc9, 0xb5, 0xee, 0x03,
	0xfe, 0xde, 0x40, 0x79, 0x4d, 0x7d, 0x43, 0x79, 0xdd, 0xe6, 0x44, 0x48, 0xe5, 0xa1, 0x65, 0x63,
	0x25, 0xbb, 0xb6, 0x6e, 0x9d, 0x7f, 0x72, 0xeb, 0x2c, 0x7d, 0x7b, 0xee, 0x55, 0x68, 0x5e, 0x7b,
	0x13, 0x9a, 0x86, 0x34, 0x7d, 0x8f, 0xfa, 0x1e, 0xf5, 0xa1, 0x76, 0xa6, 0x39, 0x5c, 0x45, 0x23,
	0x2d, 0xc6, 0x45, 0x90, 0xcf, 0x2c, 0x67, 0x56, 0xb2, 0x6b, 0xff, 0xbe, 0xc8, 0x6e, 0x1d, 0x78,
	0x87, 0x3a, 0x50, 0x65, 0x5c, 0xd8, 0x53, 0xd2, 0x54, 0x14, 0x9a, 0x31, 0x42, 0x2d, 0xfe, 0x87,
	0xb7, 0xd1, 0xb0, 0x38, 0x6a, 0x41, 0x7e, 0x78, 0xd9, 0x58, 0x99, 0xbe, 0x18, 0x30, 0xf1, 0xea,
	0xe9, 0x51, 0x0b, 0xec, 0xf1, 0x28, 0x34, 0x95, 0x72, 0x4d, 0xfd, 0xc5, 0xdf, 0xa1, 0x59, 0xa5,
	0xbd, 0xc1, 0x7c, 0xc1, 0x99, 0x57, 0xf5, 0x88, 0x0f, 0xf9, 0x11, 0x15, 0x20, 0xeb, 0x22, 0xdc,
	0x1d, 0xd2, 0x84, 0xa0, 0x45, 0x1c, 0x70, 0xe5, 0x93, 0x6d, 0x46, 0xa1, 0x79, 0xa3, 0x0f, 0xec,
	0x1e, 0x6b, 0x52, 0x01, 0xcd, 0x96, 0x38, 0xaa, 0xf5, 0x5b, 0x2a, 0xbd, 0x9c, 0x3c, 0xfb, 0x9e,
	0xf0, 0x6b, 0x03, 0x95, 0x6d, 0x12, 0xc0, 0xa3, 0xf5, 0xa0, 0x06, 0x01, 0x6b, 0x73, 0x07, 0x52,
	0x02, 0x9f, 0x53, 0x71, 0xf8, 0x71, 0xb5, 0x22, 0xff, 0xb1, 0xb6, 0xd8, 0x6e, 0x92, 0x06, 0xa8,
	0xc4, 0xc8, 0xae, 0x7d, 0x7a, 0x91, 0xeb, 0x97, 0x84, 0x1d, 0x7c, 0xe5, 0x97, 0x75, 0x0e, 0x73,
	0x34, 0xfa, 0x98, 0xec, 0x83, 0x17, 0xe4, 0x87, 0x54, 0x2a, 0x6c, 0x5e, 0x35, 0x05, 0xad, 0x18,
	0x66, 0xcb, 0x17, 0xfc, 0xc8, 0x9e, 0x8f, 0x42, 0x33, 0xe7, 0x29, 0x82, 0x16, 0xec, 0xc4, 0x12,
	0x26, 0x28, 0x9b, 0x24, 0x94, 0xbc, 0xff, 0x7c, 0x46, 0x15, 0xce, 0x43, 0x79, 0x9c, 0xdf, 0x43,
	0xb3, 0xd8, 0x5f, 0x89, 0x96, 0x26, 0x1d, 0x85, 0xe6, 0x42, 0xd0, 0x7b, 0xd5, 0xd0, 0x75, 0x4c,
	0xbc, 0x89, 0xa6, 0x1f, 0x33, 0xe2, 0xda, 0xc4, 0x23, 0xbe, 0x03, 0x7c, 0xbb, 0xaa, 0x12, 0x73,
	0xc2, 0x5e, 0x8a, 0x42, 0x33, 0xef, 0xa5, 0x38, 0x1a, 0xc4, 0x29, 0x1d, 0xfc, 0xb3, 0x81, 0x70,
	0x82, 0x5a, 0xf1, 0x7d, 0x26, 0xd4, 0x41, 0x83, 0xfc, 0x88, 0x8a, 0x54, 0xf5, 0xca, 0x91, 0xea,
	0x87, 0x8c, 0xa3, 0xb6, 0x1c, 0x85, 0xe6, 0x52, 0xd0, 0xc7, 0xd4, 0x1c, 0x1c, 0xe0, 0x0d, 0xfe,
	0xc1, 0x40, 0x53, 0x09, 0x39, 0xb9, 0xc9, 0x51, 0xe5, 0xdf, 0xa3, 0x77, 0xf5, 0x4f, 0xbf, 0xd0,
	0x1b, 0x51, 0x68, 0x2e, 0x06, 0x3a, 0x5d, 0xf3, 0x2a, 0x6d, 0x1e, 0xff, 0x6a, 0xa0, 0xe5, 0x84,
	0xb2, 0xf5, 0x42, 0x00, 0xf7, 0x89, 0xf7, 0x94, 0x93, 0x83, 0x03, 0xea, 0x54, 0x99, 0x47, 0x1d,
	0x55, 0xf4, 0xf9, 0x31, 0x75, 0x1d, 0x34, 0xb9, 0xf4, 0xfb, 0x67, 0x5f, 0xfa, 0x99, 0x10, 0x51,
	0x68, 0xde, 0x0d, 0x2e, 0x90, 0xd1, 0x9c, 0xbc, 0xd0, 0x25, 0xfc, 0x15, 0xca, 0xd4, 0x37, 0xeb,
	0xf9, 0x71, 0x55, 0xae, 0xff, 0x7d, 0xcb, 0x0e, 0x56, 0xdf, 0xac, 0xa7, 0x3b, 0xf1, 0x6c, 0x14,
	0x9a, 0x53, 0x81, 0xab, 0xc7, 0x47, 0xc2, 0xe2, 0x5d, 0x34, 0x5f, 0x83, 0x6f, 0xda, 0x10, 0x08,
	0x70, 0x77, 0x40, 0x3c, 0x67, 0xfc, 0xd9, 0x2e, 0x85, 0xe7, 0xf9, 0x09, 0x15, 0x88, 0x52, 0x14,
	0x9a, 0x45, 0x3e, 0x80, 0xaf, 0xc1, 0x0c, 0xd4, 0xc7, 0x4d, 0x34, 0x5b, 0x71, 0x5d, 0x2a, 0x6d,
	0x13, 0x6f, 0xcb, 0xef, 0xec, 0x12, 0x1e, 0xe4, 0x91, 0xca, 0x80, 0x82, 0x15, 0x87, 0x55, 0x39,
	0x2e, 0xc3, 0x6a, 0x75, 0x56, 0xad, 0x58, 0xc4, 0xbe, 0x95, 0x74, 0xf1, 0x1b, 0xe4, 0xb4, 0xb2,
	0xde, 0x1d, 0xfb, 0x90, 0xf1, 0x03, 0x34, 0x51, 0x6b, 0xfb, 0x95, 0xa0, 0xc6, 0x98, 0xc8, 0x67,
	0x97, 0x8d, 0x95, 0x71, 0x7b, 0x31, 0x0a, 0xcd, 0x39, 0xde, 0x25, 0x6a, 0xea, 0x3d, 0xc9, 0xc2,
	0xff, 0x50, 0x56, 0x4b, 0x27, 0x9c, 0x43, 0x99, 0x67, 0x70, 0x14, 0x8f, 0xcc, 0x9a, 0x7c, 0xc4,
	0xf3, 0x68, 0xa4, 0x43, 0xbc, 0x36, 0xa8, 0x49, 0x38, 0x51, 0x8b, 0x5f, 0xfe, 0x3f, 0xb4, 0x6e,
	0x14, 0xb6, 0xd0, 0xe2, 0x19, 0x05, 0x73, 0x29, 0x98, 0x0f, 0x4e, 0x4a, 0xf9, 0x8a, 0x8e, 0x94,
	0x7e, 0xcc, 0x5c, 0xba, 0xf7, 0x63, 0x1b, 0x4d, 0xd6, 0xa0, 0xe5, 0x51, 0x87, 0x6c, 0xb0, 0xb6,
	0x2f, 0x94, 0xa1, 0x11, 0xbb, 0xf8, 0x2a, 0x6e, 0xdb, 0xd7, 0xb9, 0xc6, 0xd3, 0x02, 0x97, 0xd2,
	0xc1, 0x0f, 0x51, 0xf6, 0x09, 0xf5, 0x13, 0x52, 0xa0, 0xfc, 0x1a, 0xb1, 0x6f, 0x26, 0x10, 0x0b,
	0xcd, 0x1e, 0x4b, 0x6f, 0x86, 0x9a, 0x86, 0x02, 0x20, 0x2f, 0x4e, 0x00, 0x32, 0xa7, 0x00, 0x7a,
	0xac, 0x14, 0x40, 0x8f, 0x8c, 0x7f, 0x32, 0xd0, 0xd2, 0x79, 0x27, 0x57, 0xcd, 0x35, 0xbb, 0xf6,
	0xde, 0xbb, 0x8c, 0xb8, 0xc1, 0xf3, 0xec, 0x5c, 0xb3, 0xa5, 0xd7, 0xa3, 0xe7, 0xfb, 0x85, 0xf7,
	0xd0, 0x44, 0x97, 0x11, 0x24, 0x73, 0x78, 0x65, 0x50, 0x51, 0x74, 0x85, 0x64, 0x85, 0x51, 0x0e,
	0x4d, 0xf0, 0x45, 0x90, 0xe4, 0x75, 0x57, 0x3d, 0x95, 0xd7, 0x5d, 0xa2, 0x6c, 0xbe, 0x93, 0x3b,
	0xcc, 0x85, 0x3a, 0x78, 0xe0, 0x08, 0xc6, 0x93, 0x29, 0xba, 0xf3, 0x2e, 0x91, 0xb0, 0x74, 0xc0,
	0xb8, 0xfd, 0x16, 0x64, 0xb2, 0xf8, 0x1a, 0x59, 0x4f, 0x16, 0x5d, 0x1c, 0x57, 0xd1, 0x78, 0xe5,
	0xe0, 0x80, 0xfa, 0x54, 0x1c, 0xa9, 0x8b, 0xce, 0xae, 0x2d, 0x0d, 0x3a, 0x70, 0x57, 0xc6, 0xbe,
	0x1e, 0x85, 0x26, 0x26, 0xc9, 0x9b, 0x86, 0x7a, 0x82, 0x82, 0xf7, 0x50, 0xf6, 0x29, 0xf3, 0x80,
	0x27, 0xc3, 0x6f, 0x58, 0x1d, 0xb0, 0x38, 0x08, 0xb4, 0x27, 0xa6, 0xb2, 0x4b, 0xb6, 0x97, 0x05,
	0xd1, 0x53, 0xd5, 0xb3, 0x4b, 0x43, 0xc4, 0x2f, 0x0d, 0x34, 0x5d, 0x65, 0xee, 0x15, 0x26, 0xec,
	0xb9, 0x51, 0x4c, 0x43, 0xc6, 0x71, 0x54, 0xe3, 0xbf, 0x95, 0x62, 0xe8, 0xe3, 0x3f, 0xad, 0x82,
	0x3d, 0x34, 0x53, 0x07, 0xa7, 0xcd, 0xa9, 0x90, 0x03, 0x52, 0xc0, 0x0b, 0x91, 0x1f, 0x55, 0x21,
	0xbd, 0x35, 0xe8, 0xf4, 0xa7, 0x44, 0xed, 0x9b, 0x51, 0x68, 0xfe, 0x2b, 0x48, 0x13, 0x35, 0x63,
	0xa7, 0xa1, 0x0b, 0x0f, 0xd1, 0x6c, 0xdf, 0xc5, 0x5f, 0xaa, 0xc3, 0x55, 0xd0, 0xdc, 0x80, 0x33,
	0x5f, 0xaa, 0xc5, 0xfd, 0x66, 0xa0, 0xc5, 0x33, 0x06, 0x1b, 0x2e, 0xa3, 0xb1, 0x2d, 0x9f, 0xec,
	0x7b, 0xe0, 0x2a, 0xac, 0x71, 0x7b, 0x21, 0x0a, 0xcd, 0x59, 0x88, 0x49, 0xda, 0xc1, 0xba, 0x52,
	0xf8, 0x0e, 0x1a, 0x89, 0x3f, 0x80, 0x95, 0x19, 0x7b, 0x2e, 0x0a, 0xcd, 0x19, 0x2a, 0x09, 0x9a,
	0x70, 0x2c, 0x91, 0xae, 0xd3, 0xcc, 0x3f, 0x5f, 0xa7, 0xa5, 0x5f, 0x8c, 0x93, 0x6f, 0x4e, 0xb9,
	0xc4, 0xe0, 0x4f, 0xd0, 0x6c, 0x77, 0x05, 0x21, 0xbc, 0x01, 0x42, 0x12, 0x93, 0xe6, 0xbc, 0x94,
	0x34, 0xc6, 0x79, 0x71, 0xc2, 0xd1, 0x47, 0x62, 0x9f, 0x1a, 0xde, 0x4d, 0x41, 0x27, 0xab, 0x9c,
	0x39, 0x38, 0x45, 0x7a, 0x6b, 0xd4, 0xc0, 0x76, 0xa7, 0x03, 0x95, 0x18, 0x9a, 0x4e, 0xaf, 0x33,
	0xf8, 0x36, 0x1a, 0xf6, 0x49, 0x13, 0x92, 0x55, 0x13, 0x47, 0xa1, 0x39, 0x2d, 0xdf, 0x35, 0xf7,
	0x14, 0x5f, 0x0e, 0x69, 0xbf, 0xab, 0x99, 0x44, 0x5f, 0x05, 0xe9, 0x84, 0xa8, 0x07, 0xe9, 0x84,
	0x58, 0xfa, 0xcb, 0x40, 0xb3, 0xfa, 0x82, 0x2b, 0x88, 0x68, 0x07, 0xf8, 0x0b, 0x34, 0x1a, 0x3f,
	0x29, 0xb3, 0x6f, 0xb1, 0xdb, 0xc5, 0x69, 0x23, 0x75, 0x20, 0x5e, 0x04, 0x62, 0x75, 0x7d, 0x11,
	0x48, 0xa0, 0x37, 0xd1, 0x74, 0x62, 0xab, 0xe2, 0xba, 0x1c, 0x82, 0x78, 0x09, 0x49, 0xbe, 0xd2,
	0xd3, 0x1c, 0xbd, 0x4c, 0xd3, 0x1c, 0xfc, 0x3e, 0x9a, 0xdc, 0xe2, 0x9c, 0xf1, 0x27, 0x10, 0x04,
	0x32, 0xdd, 0xe2, 0x7d, 0x42, 0xb5, 0x4c, 0x9d, 0xae, 0xb7, 0x4c, 0x9d, 0x7e, 0xf7, 0x36, 0xca,
	0x6a, 0xeb, 0x28, 0xce, 0xa2, 0xb1, 0x6d, 0xbf, 0x21, 0x91, 0x73, 0xd7, 0x30, 0x42, 0xa3, 0x5b,
	0xf1, 0xb3, 0x71, 0xf7, 0x6b, 0x94, 0xd5, 0x8e, 0x26, 0xe5, 0x36, 0x38, 0x10, 0x01, 0x6e, 0xee,
	0x1a, 0x9e, 0x43, 0x33, 0x35, 0x70, 0x98, 0xef, 0x50, 0x0f, 0x3e, 0x24, 0xd4, 0x03, 0x37, 0x67,
	0xe0, 0x19, 0x94, 0xed, 0x12, 0xa9, 0xdf, 0xc8, 0x0d, 0xe1, 0x29, 0x34, 0x51, 0xe9, 0x10, 0xea,
	0xc9, 0xfa, 0xc8, 0x65, 0xe4, 0xeb, 0x67, 0x7e, 0x93, 0xf8, 0xa4, 0x01, 0x6e, 0x6e, 0xd8, 0xde,
	0x78, 0x75, 0x5c, 0x34, 0xde, 0x1c, 0x17, 0x8d, 0x3f, 0x8e, 0x8b, 0xc6, 0x97, 0x0f, 0x1a, 0x54,
	0x1c, 0xb6, 0xf7, 0x2d, 0x87, 0x35, 0xcb, 0xfb, 0xc4, 0xff, 0x96, 0x50, 0xc7, 0x63, 0x6d, 0xb7,
	0xac, 0x82, 0xff, 0x9f, 0x6e, 0xf0, 0xcb, 0x9d, 0xb5, 0xb2, 0xfe, 0x6b, 0xca, 0xfe, 0xa8, 0xfa,
	0xad, 0xe2, 0xfe, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0xd3, 0x06, 0x96, 0x64, 0x11, 0x00,
	0x00,
}

func (m *MeshGatewaySpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshGatewaySpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshGatewaySpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IstioControlPlane != nil {
		{
			size, err := m.IstioControlPlane.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeshgateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintMeshgateway(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Ports) > 0 {
		for iNdEx := len(m.Ports) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ports[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMeshgateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.MeshGatewayConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMeshgateway(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintMeshgateway(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshGatewayConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshGatewayConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshGatewayConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RunAsRoot {
		i--
		if m.RunAsRoot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.AdditionalEnvVars) > 0 {
		for iNdEx := len(m.AdditionalEnvVars) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdditionalEnvVars[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMeshgateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.RequestedNetworkView) > 0 {
		i -= len(m.RequestedNetworkView)
		copy(dAtA[i:], m.RequestedNetworkView)
		i = encodeVarintMeshgateway(dAtA, i, uint64(len(m.RequestedNetworkView)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SDS != nil {
		{
			size, err := m.SDS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeshgateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.ServiceExternalTrafficPolicyType) > 0 {
		i -= len(m.ServiceExternalTrafficPolicyType)
		copy(dAtA[i:], m.ServiceExternalTrafficPolicyType)
		i = encodeVarintMeshgateway(dAtA, i, uint64(len(m.ServiceExternalTrafficPolicyType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ServiceLabels) > 0 {
		for k := range m.ServiceLabels {
			v := m.ServiceLabels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMeshgateway(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMeshgateway(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMeshgateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ServiceAnnotations) > 0 {
		for k := range m.ServiceAnnotations {
			v := m.ServiceAnnotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMeshgateway(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMeshgateway(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMeshgateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LoadBalancerIP) > 0 {
		i -= len(m.LoadBalancerIP)
		copy(dAtA[i:], m.LoadBalancerIP)
		i = encodeVarintMeshgateway(dAtA, i, uint64(len(m.LoadBalancerIP)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ServiceType) > 0 {
		i -= len(m.ServiceType)
		copy(dAtA[i:], m.ServiceType)
		i = encodeVarintMeshgateway(dAtA, i, uint64(len(m.ServiceType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMeshgateway(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMeshgateway(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMeshgateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.BaseK8SResourceConfigurationWithHPAWithoutImage.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMeshgateway(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.BaseK8SResourceConfiguration.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMeshgateway(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.MaxReplicas != 0 {
		i = encodeVarintMeshgateway(dAtA, i, uint64(m.MaxReplicas))
		i--
		dAtA[i] = 0x18
	}
	if m.MinReplicas != 0 {
		i = encodeVarintMeshgateway(dAtA, i, uint64(m.MinReplicas))
		i--
		dAtA[i] = 0x10
	}
	if m.ReplicaCount != 0 {
		i = encodeVarintMeshgateway(dAtA, i, uint64(m.ReplicaCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BaseK8SResourceConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseK8SResourceConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseK8SResourceConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SecurityContext != nil {
		{
			size, err := m.SecurityContext.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeshgateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.PodAnnotations) > 0 {
		for k := range m.PodAnnotations {
			v := m.PodAnnotations[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMeshgateway(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMeshgateway(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMeshgateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Tolerations) > 0 {
		for iNdEx := len(m.Tolerations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tolerations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMeshgateway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Affinity != nil {
		{
			size, err := m.Affinity.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeshgateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeSelector) > 0 {
		for k := range m.NodeSelector {
			v := m.NodeSelector[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMeshgateway(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMeshgateway(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMeshgateway(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeshgateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GatewaySDSConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GatewaySDSConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GatewaySDSConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMeshgateway(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintMeshgateway(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServicePort) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicePort) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicePort) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	{
		size, err := m.ServicePort.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMeshgateway(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.GatewayTargetPort != 0 {
		i = encodeVarintMeshgateway(dAtA, i, uint64(m.GatewayTargetPort))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NamespacedName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamespacedName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamespacedName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintMeshgateway(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMeshgateway(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MeshGatewayStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshGatewayStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshGatewayStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ErrorMessage) > 0 {
		i -= len(m.ErrorMessage)
		copy(dAtA[i:], m.ErrorMessage)
		i = encodeVarintMeshgateway(dAtA, i, uint64(len(m.ErrorMessage)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GatewayAddress) > 0 {
		for iNdEx := len(m.GatewayAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GatewayAddress[iNdEx])
			copy(dAtA[i:], m.GatewayAddress[iNdEx])
			i = encodeVarintMeshgateway(dAtA, i, uint64(len(m.GatewayAddress[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Status != 0 {
		i = encodeVarintMeshgateway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMeshgateway(dAtA []byte, offset int, v uint64) int {
	offset -= sovMeshgateway(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MeshGatewaySpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	l = m.MeshGatewayConfiguration.Size()
	n += 1 + l + sovMeshgateway(uint64(l))
	if len(m.Ports) > 0 {
		for _, e := range m.Ports {
			l = e.Size()
			n += 1 + l + sovMeshgateway(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovMeshgateway(uint64(m.Type))
	}
	if m.IstioControlPlane != nil {
		l = m.IstioControlPlane.Size()
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshGatewayConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseK8SResourceConfigurationWithHPAWithoutImage.Size()
	n += 1 + l + sovMeshgateway(uint64(l))
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMeshgateway(uint64(len(k))) + 1 + len(v) + sovMeshgateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovMeshgateway(uint64(mapEntrySize))
		}
	}
	l = len(m.ServiceType)
	if l > 0 {
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	l = len(m.LoadBalancerIP)
	if l > 0 {
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	if len(m.ServiceAnnotations) > 0 {
		for k, v := range m.ServiceAnnotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMeshgateway(uint64(len(k))) + 1 + len(v) + sovMeshgateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovMeshgateway(uint64(mapEntrySize))
		}
	}
	if len(m.ServiceLabels) > 0 {
		for k, v := range m.ServiceLabels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMeshgateway(uint64(len(k))) + 1 + len(v) + sovMeshgateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovMeshgateway(uint64(mapEntrySize))
		}
	}
	l = len(m.ServiceExternalTrafficPolicyType)
	if l > 0 {
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	if m.SDS != nil {
		l = m.SDS.Size()
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	l = len(m.RequestedNetworkView)
	if l > 0 {
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	if len(m.AdditionalEnvVars) > 0 {
		for _, e := range m.AdditionalEnvVars {
			l = e.Size()
			n += 1 + l + sovMeshgateway(uint64(l))
		}
	}
	if m.RunAsRoot {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicaCount != 0 {
		n += 1 + sovMeshgateway(uint64(m.ReplicaCount))
	}
	if m.MinReplicas != 0 {
		n += 1 + sovMeshgateway(uint64(m.MinReplicas))
	}
	if m.MaxReplicas != 0 {
		n += 1 + sovMeshgateway(uint64(m.MaxReplicas))
	}
	l = m.BaseK8SResourceConfiguration.Size()
	n += 1 + l + sovMeshgateway(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseK8SResourceConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	if len(m.NodeSelector) > 0 {
		for k, v := range m.NodeSelector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMeshgateway(uint64(len(k))) + 1 + len(v) + sovMeshgateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovMeshgateway(uint64(mapEntrySize))
		}
	}
	if m.Affinity != nil {
		l = m.Affinity.Size()
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	if len(m.Tolerations) > 0 {
		for _, e := range m.Tolerations {
			l = e.Size()
			n += 1 + l + sovMeshgateway(uint64(l))
		}
	}
	if len(m.PodAnnotations) > 0 {
		for k, v := range m.PodAnnotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMeshgateway(uint64(len(k))) + 1 + len(v) + sovMeshgateway(uint64(len(v)))
			n += mapEntrySize + 1 + sovMeshgateway(uint64(mapEntrySize))
		}
	}
	if m.SecurityContext != nil {
		l = m.SecurityContext.Size()
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GatewaySDSConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServicePort) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GatewayTargetPort != 0 {
		n += 1 + sovMeshgateway(uint64(m.GatewayTargetPort))
	}
	l = m.ServicePort.Size()
	n += 1 + l + sovMeshgateway(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NamespacedName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MeshGatewayStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovMeshgateway(uint64(m.Status))
	}
	if len(m.GatewayAddress) > 0 {
		for _, s := range m.GatewayAddress {
			l = len(s)
			n += 1 + l + sovMeshgateway(uint64(l))
		}
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovMeshgateway(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMeshgateway(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMeshgateway(x uint64) (n int) {
	return sovMeshgateway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MeshGatewaySpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeshGatewaySpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeshGatewaySpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeshGatewayConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MeshGatewayConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ports", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ports = append(m.Ports, ServicePort{})
			if err := m.Ports[len(m.Ports)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= GatewayType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IstioControlPlane", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IstioControlPlane == nil {
				m.IstioControlPlane = &NamespacedName{}
			}
			if err := m.IstioControlPlane.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeshgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshGatewayConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeshGatewayConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeshGatewayConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseK8SResourceConfigurationWithHPAWithoutImage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseK8SResourceConfigurationWithHPAWithoutImage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMeshgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMeshgateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMeshgateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMeshgateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceType = k8s_io_api_core_v1.ServiceType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoadBalancerIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoadBalancerIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceAnnotations == nil {
				m.ServiceAnnotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMeshgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMeshgateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMeshgateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMeshgateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServiceAnnotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceLabels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServiceLabels == nil {
				m.ServiceLabels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMeshgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMeshgateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMeshgateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMeshgateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ServiceLabels[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceExternalTrafficPolicyType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceExternalTrafficPolicyType = k8s_io_api_core_v1.ServiceExternalTrafficPolicyType(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SDS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SDS == nil {
				m.SDS = &GatewaySDSConfiguration{}
			}
			if err := m.SDS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedNetworkView", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedNetworkView = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalEnvVars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalEnvVars = append(m.AdditionalEnvVars, v1.EnvVar{})
			if err := m.AdditionalEnvVars[len(m.AdditionalEnvVars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunAsRoot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RunAsRoot = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMeshgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseK8SResourceConfigurationWithHPAWithoutImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseK8sResourceConfigurationWithHPAWithoutImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseK8sResourceConfigurationWithHPAWithoutImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			m.ReplicaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinReplicas", wireType)
			}
			m.MinReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxReplicas", wireType)
			}
			m.MaxReplicas = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxReplicas |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseK8SResourceConfiguration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseK8SResourceConfiguration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeshgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseK8SResourceConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseK8sResourceConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseK8sResourceConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &v1.ResourceRequirements{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeSelector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeSelector == nil {
				m.NodeSelector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMeshgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMeshgateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMeshgateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMeshgateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeSelector[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affinity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Affinity == nil {
				m.Affinity = &v1.Affinity{}
			}
			if err := m.Affinity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tolerations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tolerations = append(m.Tolerations, v1.Toleration{})
			if err := m.Tolerations[len(m.Tolerations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodAnnotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodAnnotations == nil {
				m.PodAnnotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMeshgateway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMeshgateway
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMeshgateway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMeshgateway
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMeshgateway(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMeshgateway
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PodAnnotations[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SecurityContext == nil {
				m.SecurityContext = &v1.SecurityContext{}
			}
			if err := m.SecurityContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeshgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GatewaySDSConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GatewaySDSConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GatewaySDSConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &v1.ResourceRequirements{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeshgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicePort) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicePort: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicePort: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayTargetPort", wireType)
			}
			m.GatewayTargetPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GatewayTargetPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicePort", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServicePort.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeshgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamespacedName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamespacedName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamespacedName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeshgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshGatewayStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeshgateway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeshGatewayStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeshGatewayStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ConfigState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GatewayAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GatewayAddress = append(m.GatewayAddress, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeshgateway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeshgateway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMeshgateway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeshgateway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeshgateway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeshgateway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMeshgateway
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMeshgateway
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMeshgateway
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMeshgateway        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeshgateway          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMeshgateway = fmt.Errorf("proto: unexpected end of group")
)
