// Copyright 2021 Cisco Systems, Inc. and/or its affiliates.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "mesh/v1alpha1/config.proto";
import "gogoproto/gogo.proto";
import "google/api/field_behavior.proto";
import "k8s.io/api/core/v1/generated.proto";

// $schema: istio-operator.api.v1alpha1.MeshGatewaySpec
// $title: Istio Mesh Gateway Spec
// $description: Istio Mesh Gateway descriptor

package istio_operator.v2.api.v1alpha1;

option go_package = "github.com/banzaicloud/istio-operator/v2/api/v1alpha1";

// MeshGateway defines an Istio ingress or egress gateway
//
// <!-- crd generation tags
// +cue-gen:MeshGateway:groupName:servicemesh.cisco.com
// +cue-gen:MeshGateway:version:v1alpha1
// +cue-gen:MeshGateway:storageVersion
// +cue-gen:MeshGateway:annotations:helm.sh/resource-policy=keep
// +cue-gen:MeshGateway:subresource:status
// +cue-gen:MeshGateway:scope:Namespaced
// +cue-gen:MeshGateway:resource:shortNames=mgw,meshgw
// +cue-gen:MeshGateway:printerColumn:name=Age,type=date,JSONPath=.metadata.creationTimestamp,description="CreationTimestamp is a timestamp
// representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations.
// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
// +cue-gen:MeshGateway:preserveUnknownFields:false
// -->
//
// <!-- go code generation tags
// +genclient
// +k8s:deepcopy-gen=true
// -->
message MeshGatewaySpec {
    // Contains the intended version for the Mesh Gateway.
    // +kubebuilder:validation:Pattern=^1.
    string version = 1 [(gogoproto.jsontag) = "version", (google.api.field_behavior) = REQUIRED];
    // 
    MeshGatewayConfiguration MeshGatewayConfiguration = 2 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
    // +kubebuilder:validation:MinItems=0
    repeated ServicePort ports = 3 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "ports"];
    // +kubebuilder:validation:Enum=ingress;egress
    GatewayType type = 4  [(gogoproto.jsontag) = "type"];
    // Istio CR to which this gateway belongs to
    NamespacedName istioControlPlane = 5 [(gogoproto.jsontag) = "istioControlPlane,omitempty"];
}

message MeshGatewayConfiguration {
    //
    BaseK8sResourceConfigurationWithHPAWithoutImage BaseK8sResourceConfigurationWithHPAWithoutImage = 1 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
    //
	map<string, string> Labels = 2 [(gogoproto.jsontag) = "labels,omitempty"];
	// +kubebuilder:validation:Enum=ClusterIP;NodePort;LoadBalancer;ExternalName
	string ServiceType = 3 [(gogoproto.customtype) = "k8s.io/api/core/v1.ServiceType", (gogoproto.nullable) = false, (gogoproto.jsontag) = "serviceType,omitempty"];
    // 
	string LoadBalancerIP = 4 [(gogoproto.jsontag) = "loadBalancerIP,omitempty"];
    //
    map<string, string> ServiceAnnotations = 5 [(gogoproto.jsontag) = "serviceAnnotations,omitempty"];
    //
    map<string, string> ServiceLabels = 6 [(gogoproto.jsontag) = "serviceLabels,omitempty"];
	// +kubebuilder:validation:Enum=Local;Cluster
    string ServiceExternalTrafficPolicyType = 7 [(gogoproto.customtype) = "k8s.io/api/core/v1.ServiceExternalTrafficPolicyType", (gogoproto.nullable) = false, (gogoproto.jsontag) = "serviceExternalTrafficPolicyType,omitempty"];
	// 
	GatewaySDSConfiguration SDS = 8 [(gogoproto.jsontag) = "sds,omitempty"];
    //
	string RequestedNetworkView = 9 [(gogoproto.jsontag) = "requestedNetworkView,omitempty"];
	// If present will be appended to the environment variables of the container
    repeated k8s.io.api.core.v1.EnvVar AdditionalEnvVars = 10 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "additionalEnvVars,omitempty"];
	// Whether to run the gateway in a privileged container
	bool RunAsRoot = 11 [(gogoproto.jsontag) = "runAsRoot,omitempty"];
}

// TODO: move these to seperate protos
message BaseK8sResourceConfigurationWithHPAWithoutImage {
    // +kubebuilder:validation:Minimum=0
    int32 ReplicaCount = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "replicaCount,omitempty"];
	// +kubebuilder:validation:Minimum=0
    int32 MinReplicas = 2 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "minReplicas,omitempty"];
	// +kubebuilder:validation:Minimum=0
    int32 MaxReplicas = 3 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "maxReplicas,omitempty"];
    //
    BaseK8sResourceConfiguration BaseK8sResourceConfiguration = 4 [(gogoproto.nullable) = false, (gogoproto.embed) = true, (gogoproto.jsontag) = ",inline"];
}

message BaseK8sResourceConfiguration {
    //
    k8s.io.api.core.v1.ResourceRequirements Resources = 1 [(gogoproto.jsontag) = "resources,omitempty"];
    //
	map<string,string> NodeSelector = 2 [(gogoproto.jsontag) = "nodeSelector,omitempty"];
    //
	k8s.io.api.core.v1.Affinity Affinity = 3 [(gogoproto.jsontag) = "affinity,omitempty"];
    //
	repeated k8s.io.api.core.v1.Toleration Tolerations = 4 [(gogoproto.nullable) = false, (gogoproto.jsontag) = "tolerations,omitempty"];
    //
	map<string,string> PodAnnotations = 5 [(gogoproto.jsontag) = "podAnnotations,omitempty"];
    //
	k8s.io.api.core.v1.SecurityContext SecurityContext = 6 [(gogoproto.jsontag) = "securityContext,omitempty"];
}

message GatewaySDSConfiguration {
    //
    bool Enabled = 1 [(gogoproto.jsontag) = "enabled,omitempty"];
    //
    string Image = 2 [(gogoproto.jsontag) = "image,omitempty"];
    //
    k8s.io.api.core.v1.ResourceRequirements Resources = 3 [(gogoproto.jsontag) = "resources,omitempty"];
}

// TODO: GatewayTargetPort to pointer
message ServicePort {
    //
    int32 GatewayTargetPort = 1 [(gogoproto.nullable) = true, (gogoproto.jsontag) = "targetPort,omitempty"];
    // 
    k8s.io.api.core.v1.ServicePort ServicePort = 2 [(gogoproto.nullable) = false, (gogoproto.jsontag) = ",inline", (gogoproto.embed) = true];
}

enum GatewayType {
    Ingress = 0;
    Egress = 1;
}

message NamespacedName {
    // Name of the referenced Kubernetes resource
    string name = 1 [(gogoproto.jsontag) = "name,omitempty"];
    // Namespace of the referenced Kubernetes resource
    string namespace = 2  [(gogoproto.jsontag) = "namespace,omitempty"];;
}

// <!-- go code generation tags
// +genclient
// +k8s:deepcopy-gen=true
// -->
message MeshGatewayStatus {
}
