/*
Copyright 2019 Banzai Cloud.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	v1beta1 "github.com/banzaicloud/istio-operator/pkg/apis/istio/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MeshGatewayLister helps list MeshGateways.
type MeshGatewayLister interface {
	// List lists all MeshGateways in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.MeshGateway, err error)
	// MeshGateways returns an object that can list and get MeshGateways.
	MeshGateways(namespace string) MeshGatewayNamespaceLister
	MeshGatewayListerExpansion
}

// meshGatewayLister implements the MeshGatewayLister interface.
type meshGatewayLister struct {
	indexer cache.Indexer
}

// NewMeshGatewayLister returns a new MeshGatewayLister.
func NewMeshGatewayLister(indexer cache.Indexer) MeshGatewayLister {
	return &meshGatewayLister{indexer: indexer}
}

// List lists all MeshGateways in the indexer.
func (s *meshGatewayLister) List(selector labels.Selector) (ret []*v1beta1.MeshGateway, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MeshGateway))
	})
	return ret, err
}

// MeshGateways returns an object that can list and get MeshGateways.
func (s *meshGatewayLister) MeshGateways(namespace string) MeshGatewayNamespaceLister {
	return meshGatewayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MeshGatewayNamespaceLister helps list and get MeshGateways.
type MeshGatewayNamespaceLister interface {
	// List lists all MeshGateways in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.MeshGateway, err error)
	// Get retrieves the MeshGateway from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.MeshGateway, error)
	MeshGatewayNamespaceListerExpansion
}

// meshGatewayNamespaceLister implements the MeshGatewayNamespaceLister
// interface.
type meshGatewayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MeshGateways in the indexer for a given namespace.
func (s meshGatewayNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.MeshGateway, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MeshGateway))
	})
	return ret, err
}

// Get retrieves the MeshGateway from the indexer for a given namespace and name.
func (s meshGatewayNamespaceLister) Get(name string) (*v1beta1.MeshGateway, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("meshgateway"), name)
	}
	return obj.(*v1beta1.MeshGateway), nil
}
