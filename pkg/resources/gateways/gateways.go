/*
Copyright 2019 Banzai Cloud.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package gateways

import (
	"fmt"

	"github.com/go-logr/logr"
	"github.com/goph/emperror"
	"k8s.io/client-go/dynamic"
	"sigs.k8s.io/controller-runtime/pkg/client"

	istiov1beta1 "github.com/banzaicloud/istio-operator/pkg/apis/istio/v1beta1"
	"github.com/banzaicloud/istio-operator/pkg/k8sutil"
	"github.com/banzaicloud/istio-operator/pkg/resources"
	"github.com/banzaicloud/istio-operator/pkg/util"
)

const (
	componentName      = "gateways"
	ingress            = "ingressgateway"
	egress             = "egressgateway"
	defaultGatewayName = "istio-autogenerated-k8s-ingress"
)

type Reconciler struct {
	resources.Reconciler
	dynamic dynamic.Interface
}

func New(client client.Client, dc dynamic.Interface, config *istiov1beta1.Istio) *Reconciler {
	return &Reconciler{
		Reconciler: resources.Reconciler{
			Client: client,
			Config: config,
		},
		dynamic: dc,
	}
}

func (r *Reconciler) Reconcile(log logr.Logger) error {
	log = log.WithValues("component", componentName)

	log.Info("Reconciling")

	var ingressGatewayDesiredState k8sutil.DesiredState
	var egressGatewayDesiredState k8sutil.DesiredState
	var pdbDesiredState k8sutil.DesiredState
	var sdsDesiredState k8sutil.DesiredState
	if util.PointerToBool(r.Config.Spec.Gateways.Enabled) {
		if util.PointerToBool(r.Config.Spec.Gateways.IngressConfig.Enabled) {
			ingressGatewayDesiredState = k8sutil.DesiredStatePresent
		} else {
			ingressGatewayDesiredState = k8sutil.DesiredStateAbsent
		}
		if util.PointerToBool(r.Config.Spec.Gateways.EgressConfig.Enabled) {
			egressGatewayDesiredState = k8sutil.DesiredStatePresent
		} else {
			egressGatewayDesiredState = k8sutil.DesiredStateAbsent
		}
		if util.PointerToBool(r.Config.Spec.DefaultPodDisruptionBudget.Enabled) {
			pdbDesiredState = k8sutil.DesiredStatePresent
		} else {
			pdbDesiredState = k8sutil.DesiredStateAbsent
		}
		if util.PointerToBool(r.Config.Spec.Gateways.IngressConfig.SDS.Enabled) || util.PointerToBool(r.Config.Spec.Gateways.EgressConfig.SDS.Enabled) {
			sdsDesiredState = k8sutil.DesiredStatePresent
		} else {
			sdsDesiredState = k8sutil.DesiredStateAbsent
		}
	} else {
		ingressGatewayDesiredState = k8sutil.DesiredStateAbsent
		egressGatewayDesiredState = k8sutil.DesiredStateAbsent
		pdbDesiredState = k8sutil.DesiredStateAbsent
		sdsDesiredState = k8sutil.DesiredStateAbsent
	}

	var rsv = []resources.ResourceVariationWithDesiredState{
		{ResourceVariation: r.serviceAccount},
		{ResourceVariation: r.clusterRole},
		{ResourceVariation: r.clusterRoleBinding},
		{ResourceVariation: r.deployment},
		{ResourceVariation: r.service},
		{ResourceVariation: r.horizontalPodAutoscaler},
		{ResourceVariation: r.podDisruptionBudget, DesiredState: pdbDesiredState},
		{ResourceVariation: r.role, DesiredState: sdsDesiredState},
		{ResourceVariation: r.roleBinding, DesiredState: sdsDesiredState},
	}

	for _, res := range append(resources.ResolveVariations(ingress, rsv, ingressGatewayDesiredState), resources.ResolveVariations(egress, rsv, egressGatewayDesiredState)...) {
		o := res.Resource()
		err := k8sutil.Reconcile(log, r.Client, o, res.DesiredState)
		if err != nil {
			return emperror.WrapWith(err, "failed to reconcile resource", "resource", o.GetObjectKind().GroupVersionKind())
		}
	}

	var k8sIngressDesiredState k8sutil.DesiredState
	if util.PointerToBool(r.Config.Spec.Gateways.Enabled) &&
		util.PointerToBool(r.Config.Spec.Gateways.IngressConfig.Enabled) &&
		util.PointerToBool(r.Config.Spec.Gateways.K8sIngress.Enabled) {
		k8sIngressDesiredState = k8sutil.DesiredStatePresent
	} else {
		k8sIngressDesiredState = k8sutil.DesiredStateAbsent
	}

	var meshExpansionDesiredState k8sutil.DesiredState
	if util.PointerToBool(r.Config.Spec.MeshExpansion) {
		meshExpansionDesiredState = k8sutil.DesiredStatePresent
	} else {
		meshExpansionDesiredState = k8sutil.DesiredStateAbsent
	}

	if r.Config.Name == "istio-config" {
		log.Info("Reconciled")
		return nil
	}

	var drs = []resources.DynamicResourceWithDesiredState{
		{DynamicResource: r.gateway, DesiredState: k8sIngressDesiredState},
		{DynamicResource: r.meshExpansionGateway, DesiredState: meshExpansionDesiredState},
		{DynamicResource: r.clusterAwareGateway, DesiredState: meshExpansionDesiredState},
	}
	for _, dr := range drs {
		o := dr.DynamicResource()
		err := o.Reconcile(log, r.dynamic, dr.DesiredState)
		if err != nil {
			return emperror.WrapWith(err, "failed to reconcile dynamic resource", "resource", o.Gvr)
		}
	}

	log.Info("Reconciled")
	return nil
}

func (r *Reconciler) getGatewayConfig(gw string) *istiov1beta1.GatewayConfiguration {
	switch gw {
	case ingress:
		return &r.Config.Spec.Gateways.IngressConfig
	case egress:
		return &r.Config.Spec.Gateways.EgressConfig
	}
	return nil
}

func serviceAccountName(gw string) string {
	return fmt.Sprintf("istio-%s-service-account", gw)
}

func clusterRoleName(gw string) string {
	return fmt.Sprintf("istio-%s-cluster-role", gw)
}

func clusterRoleBindingName(gw string) string {
	return fmt.Sprintf("istio-%s-cluster-role-binding", gw)
}

func roleName(gw string) string {
	return fmt.Sprintf("istio-%s-role-sds", gw)
}

func roleBindingName(gw string) string {
	return fmt.Sprintf("istio-%s-role-binding-sds", gw)
}

func gatewayName(gw string) string {
	return fmt.Sprintf("istio-%s", gw)
}

func hpaName(gw string) string {
	return fmt.Sprintf("istio-%s-autoscaler", gw)
}

func pdbName(gw string) string {
	return fmt.Sprintf("istio-%s", gw)
}

func gwLabels(gw string) map[string]string {
	return map[string]string{
		"app": fmt.Sprintf("istio-%s", gw),
	}
}

func labelSelector(gw string) map[string]string {
	return util.MergeLabels(gwLabels(gw), map[string]string{
		"istio": gw,
	})
}
